# defining a simple function and looking at its return value

def myfunc(x):
	print(x)
	
	
myfunc('hello')
print(myfunc('hello')) #returms the value 'None'

if None == myfunc('doesnt matter'):
	print('false')
	
#~~~

def myl(x=2,y=3,z=4):
	return x+2*y+3*z
	
print(myl()) #uses default values
print(myl(2,3,5)) #overrides default values
print(myl(z=5)) #overrides default value for z

#~~~~

def myfunc(a):
	print(a[0])
	print(a[1])
	print(a[2])
	
alist=['hans', 'best', 'all']
myfunc (alist(0), alist(1), alist(2))


#is functionally the same as

def myfunc(a,b,c):
	print(a)
	print(b)
	print(c)
	
alist=['hans', 'best', 'all']
myfunc (*alist)

# ~~~

def square(x): return x*x

square(2)

def applier(q,x): return q(x)

x=applier((lambda y: y*y, 7))
print(x)

#~~~

squared=[]
for i in items:
	squared.append(i**2)
print(squared)


print (map ((lambda x: x*x, items)))


def squ(x):
	return x*x

print (list(

#~~~~

def addl(x): return x+1
map(addl, [1,2,3,4])

map(lambda

#~~~

map(+, [1,2,3,4], [100,200,300,400]) #101, 202, 303, 404

#~~~

def add_fun(x,y):
	return x+y
	
print(list(map(add_fun, [1,2,3,4], [100,200,300,400])

#~~~ convert to lambda!!!

print(lambda ())

#~~~~~

alist [11,22,33,44]
blist=alist #a reference
alist.append[55]
print(blist) #11,22,33,44,55 since blist is a reference of alist

blist=alist[:] #duplicate
alist.append[55]
print(blist) #11,22,33,44 since alist is a separate copy



